{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"MkDocs PDF Generate Plugin The pdf-generate plugin will generate separate PDF files for each markdown page in your MkDocs repository using WeasyPrint . The exported documents support many advanced features such as table of contents, customisable cover page, support for CSS paged media module CSS paged media module , and using MkDocs page metadata to generate cover page. Requirements MkDocs version 1.3.0 or higher Python 3.8 or higher WeasyPrint Installation Install the package with pip: pip install mkdocs-pdf-generate Note: Package is not published to PyPI yet, so we recommend installing from source Install from source repository: cd [ YOUR_PROJECT_DIRECTORY ] git clone https://github.com/iSOLveIT/mkdocs-pdf-generate cd mkdocs-pdf-generate pip install -e . Enable the plugin in your mkdocs.yml : plugins : - search - pdf-generate Note: If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set, but now you have to enable it explicitly. More information about plugins in the MkDocs documentation . Contributing From reporting a bug to submitting a pull request: every contribution is appreciated and welcome. Report bugs, ask questions and request features using Github issues . If you want to contribute to the code of this project, please read the Contribution Guidelines . Special thanks Terry Zhao the author of the MkDocs PDF Export Plugin the source of our inspiration. We've used some of his code in this project.","title":"Intro"},{"location":"index.html#mkdocs-pdf-generate-plugin","text":"The pdf-generate plugin will generate separate PDF files for each markdown page in your MkDocs repository using WeasyPrint . The exported documents support many advanced features such as table of contents, customisable cover page, support for CSS paged media module CSS paged media module , and using MkDocs page metadata to generate cover page.","title":"MkDocs PDF Generate Plugin"},{"location":"index.html#requirements","text":"MkDocs version 1.3.0 or higher Python 3.8 or higher WeasyPrint","title":"Requirements"},{"location":"index.html#installation","text":"Install the package with pip: pip install mkdocs-pdf-generate Note: Package is not published to PyPI yet, so we recommend installing from source Install from source repository: cd [ YOUR_PROJECT_DIRECTORY ] git clone https://github.com/iSOLveIT/mkdocs-pdf-generate cd mkdocs-pdf-generate pip install -e . Enable the plugin in your mkdocs.yml : plugins : - search - pdf-generate Note: If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set, but now you have to enable it explicitly. More information about plugins in the MkDocs documentation .","title":"Installation"},{"location":"index.html#contributing","text":"From reporting a bug to submitting a pull request: every contribution is appreciated and welcome. Report bugs, ask questions and request features using Github issues . If you want to contribute to the code of this project, please read the Contribution Guidelines .","title":"Contributing"},{"location":"index.html#special-thanks","text":"Terry Zhao the author of the MkDocs PDF Export Plugin the source of our inspiration. We've used some of his code in this project.","title":"Special thanks"},{"location":"options.html","text":"Options The plugin allows users to pass in both global and local options. Note Local options has a higher precedence than global options. Global Options Some of these global options are used as default options when local options are not set. The global options are passed to the plugin through mkdocs.yml : plugins : - pdf-generate : author : \"Randy Duodu\" author_logo : img/logo.svg copyright : \"Copyright \u00a9 2022 - MkDocs PDF Generate\" disclaimer : \"Disclaimer: Content can change at anytime and best to refer to website for latest information.\" cover : true cover_title : TITLE TEXT cover_subtitle : SUBTITLE TEXT custom_template_path : TEMPLATES PATH toc : false toc_level : 3 toc_title : TOC TITLE TEXT toc_numbering : true cover_images : default : img/default.svg type1 : img/type1.png type2 : https://example.com/cover.svg enabled_if_env : ENABLE_PDF_EXPORT for Cover cover Set the value to false if you don't need a cover page. default : true cover_title Set the title text in cover page. Note The following rule is applied when setting the value for cover title. Cover Title precedence: title (local pdf metadata option) H1 heading for page cover title (global) site_name variable in your project's mkdocs.yml default : use site_name in your project's mkdocs.yml cover_subtitle Set the subtitle text in cover page. Note The following rule is applied when setting the value for cover subtitle. Cover Subtitle precedence: subtitle (local pdf metadata option) type (local pdf metadata option) cover subtitle (global) default : None author Set the author text. default : use site_author in your project's mkdocs.yml author_logo Provide a logo image which you can use in the cover page. Tip Using SVG images as the value for author logo is recommended. default : use theme.logo in your project's mkdocs.yml copyright Set the copyright text. default : use copyright in your project's mkdocs.yml disclaimer Set the disclaimer text. default : None cover_images Set the cover image for specific document types. The option takes a key-value pair where the key must be the same value as you specified for the type local pdf metadata option. The value for a key must be the path to the image. Example: - pdf-generate : cover_images : default : img/home-banner.svg home : img/manual-banner.svg options : img/project-banner.svg customize : img/tutorial-banner.svg Note Apart from the default key-value pair under cover_images, the other key-value pairs can have user-defined values. Recommended: You must specify an image path for the default key-value pair. We will use the image as the cover image for any document that does not specify the type local pdf metadata option. default : None for Heading and TOC toc Set the value to false if you don't need a table of content section in the PDF document. default : true toc_title Set the title text for Table of Contents . default : Table of Contents toc_level Set the level of Table of Contents . This value is enabled in the range of from 1 to 3 . default : 3 Note The developers are working on extending the range for toc_level option from a value between 1-3 to a value between 1-6 . ... and more custom_template_path The path where your custom cover template (e.g. cover.html ) is located. Info The custom template's filename should be cover with any of these file extensions .html.j2 , .html.jinja2 , .html , or .htm . You can refer to this example about how to use a custom cover template. default : templates enabled_if_env Setting this option will generate PDF files only if there is an environment variable set to 1. The environment variable must match the value of enabled_if_env . This is useful to disable building the PDF files during development, since it can take a long time to export all files. default : None PDF generation can take significantly longer than HTML generation which can slow down MkDocs built-in dev-server. Adding enabled_if_env: ENABLE_PDF_EXPORT disables PDF generation during development and runs the dev-server normally: $ mkdocs serve INFO - Building documentation... INFO - PDF export is disabled ( set environment variable ENABLE_PDF_EXPORT to 1 to enable ) INFO - Cleaning site directory INFO - Documentation built in 0 .54 seconds INFO - [ 08 :51:24 ] Watching paths for changes: 'docs' , 'mkdocs.yml' INFO - [ 08 :51:24 ] Serving on http://127.0.0.1:8000/ and to build PDF files, set the ENABLE_PDF_EXPORT=1 environment variable: $ ENABLE_PDF_EXPORT = 1 mkdocs build ... INFO - Converting 2 files to PDF took 1 .82s INFO - Documentation built in 2 .29 seconds verbose Setting this to true will show all WeasyPrint debug messages during the build. default : false media_type Allows you to use a different CSS media type (or a custom one like pdf-generate ) for the PDF export. default : print theme_handler_path Allows you to specify a custom theme handler module. This path must be relative to your project root (See example below). default : None mkdocs.yml : plugins : - pdf-generate : theme_handler_path : theme-handler project-root \u251c\u2500\u2500 theme-handler.py \u251c\u2500\u2500 docs \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 site . . Local Options The plugin allows you to set document specific options using the Markdown page metadata. If a page metadata is specified, it has higher precedence than the global options . The local options are specified in the specific Markdown document you want to use: --- pdf: - build: false - filename: Plugin Options - title: Options for MkDocs PDF Generate Plugin - type: Manual - revision: 0.2 --- The following options are available: build title subtitle type filename revision build Allows you to specify whether to generate a PDF file for a Markdown file. Value is true or false . Note The function of the build option is different from that of the enabled_if_env . The build option disables PDF generation for a single Markdown file while enabled_if_env disables PDF generation for the entire project. default : true title Set the title text in cover page. subtitle Set the subtitle text in cover page. type Set the document type. NB: We use the value for this option in selecting the document's cover image from the cover_images option. filename Set the filename to use for a specific page when downloading the PDF document. Note Filename precedence: filename (local pdf metadata) - formatted such that all are valid characters title (local pdf metadata) - formatted such that all are valid characters H1 - formatted such that all are valid characters revision Set the revision text in cover page.","title":"Options"},{"location":"options.html#options","text":"The plugin allows users to pass in both global and local options. Note Local options has a higher precedence than global options.","title":"Options"},{"location":"options.html#global-options","text":"Some of these global options are used as default options when local options are not set. The global options are passed to the plugin through mkdocs.yml : plugins : - pdf-generate : author : \"Randy Duodu\" author_logo : img/logo.svg copyright : \"Copyright \u00a9 2022 - MkDocs PDF Generate\" disclaimer : \"Disclaimer: Content can change at anytime and best to refer to website for latest information.\" cover : true cover_title : TITLE TEXT cover_subtitle : SUBTITLE TEXT custom_template_path : TEMPLATES PATH toc : false toc_level : 3 toc_title : TOC TITLE TEXT toc_numbering : true cover_images : default : img/default.svg type1 : img/type1.png type2 : https://example.com/cover.svg enabled_if_env : ENABLE_PDF_EXPORT","title":"Global Options"},{"location":"options.html#for-cover","text":"","title":"for Cover"},{"location":"options.html#cover","text":"Set the value to false if you don't need a cover page. default : true","title":"cover"},{"location":"options.html#cover_title","text":"Set the title text in cover page. Note The following rule is applied when setting the value for cover title. Cover Title precedence: title (local pdf metadata option) H1 heading for page cover title (global) site_name variable in your project's mkdocs.yml default : use site_name in your project's mkdocs.yml","title":"cover_title"},{"location":"options.html#cover_subtitle","text":"Set the subtitle text in cover page. Note The following rule is applied when setting the value for cover subtitle. Cover Subtitle precedence: subtitle (local pdf metadata option) type (local pdf metadata option) cover subtitle (global) default : None","title":"cover_subtitle"},{"location":"options.html#author","text":"Set the author text. default : use site_author in your project's mkdocs.yml","title":"author"},{"location":"options.html#author_logo","text":"Provide a logo image which you can use in the cover page. Tip Using SVG images as the value for author logo is recommended. default : use theme.logo in your project's mkdocs.yml","title":"author_logo"},{"location":"options.html#copyright","text":"Set the copyright text. default : use copyright in your project's mkdocs.yml","title":"copyright"},{"location":"options.html#disclaimer","text":"Set the disclaimer text. default : None","title":"disclaimer"},{"location":"options.html#cover_images","text":"Set the cover image for specific document types. The option takes a key-value pair where the key must be the same value as you specified for the type local pdf metadata option. The value for a key must be the path to the image. Example: - pdf-generate : cover_images : default : img/home-banner.svg home : img/manual-banner.svg options : img/project-banner.svg customize : img/tutorial-banner.svg Note Apart from the default key-value pair under cover_images, the other key-value pairs can have user-defined values. Recommended: You must specify an image path for the default key-value pair. We will use the image as the cover image for any document that does not specify the type local pdf metadata option. default : None","title":"cover_images"},{"location":"options.html#for-heading-and-toc","text":"","title":"for Heading and TOC"},{"location":"options.html#toc","text":"Set the value to false if you don't need a table of content section in the PDF document. default : true","title":"toc"},{"location":"options.html#toc_title","text":"Set the title text for Table of Contents . default : Table of Contents","title":"toc_title"},{"location":"options.html#toc_level","text":"Set the level of Table of Contents . This value is enabled in the range of from 1 to 3 . default : 3 Note The developers are working on extending the range for toc_level option from a value between 1-3 to a value between 1-6 .","title":"toc_level"},{"location":"options.html#and-more","text":"","title":"... and more"},{"location":"options.html#custom_template_path","text":"The path where your custom cover template (e.g. cover.html ) is located. Info The custom template's filename should be cover with any of these file extensions .html.j2 , .html.jinja2 , .html , or .htm . You can refer to this example about how to use a custom cover template. default : templates","title":"custom_template_path"},{"location":"options.html#enabled_if_env","text":"Setting this option will generate PDF files only if there is an environment variable set to 1. The environment variable must match the value of enabled_if_env . This is useful to disable building the PDF files during development, since it can take a long time to export all files. default : None PDF generation can take significantly longer than HTML generation which can slow down MkDocs built-in dev-server. Adding enabled_if_env: ENABLE_PDF_EXPORT disables PDF generation during development and runs the dev-server normally: $ mkdocs serve INFO - Building documentation... INFO - PDF export is disabled ( set environment variable ENABLE_PDF_EXPORT to 1 to enable ) INFO - Cleaning site directory INFO - Documentation built in 0 .54 seconds INFO - [ 08 :51:24 ] Watching paths for changes: 'docs' , 'mkdocs.yml' INFO - [ 08 :51:24 ] Serving on http://127.0.0.1:8000/ and to build PDF files, set the ENABLE_PDF_EXPORT=1 environment variable: $ ENABLE_PDF_EXPORT = 1 mkdocs build ... INFO - Converting 2 files to PDF took 1 .82s INFO - Documentation built in 2 .29 seconds","title":"enabled_if_env"},{"location":"options.html#verbose","text":"Setting this to true will show all WeasyPrint debug messages during the build. default : false","title":"verbose"},{"location":"options.html#media_type","text":"Allows you to use a different CSS media type (or a custom one like pdf-generate ) for the PDF export. default : print","title":"media_type"},{"location":"options.html#theme_handler_path","text":"Allows you to specify a custom theme handler module. This path must be relative to your project root (See example below). default : None mkdocs.yml : plugins : - pdf-generate : theme_handler_path : theme-handler project-root \u251c\u2500\u2500 theme-handler.py \u251c\u2500\u2500 docs \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 site . .","title":"theme_handler_path"},{"location":"options.html#local-options","text":"The plugin allows you to set document specific options using the Markdown page metadata. If a page metadata is specified, it has higher precedence than the global options . The local options are specified in the specific Markdown document you want to use: --- pdf: - build: false - filename: Plugin Options - title: Options for MkDocs PDF Generate Plugin - type: Manual - revision: 0.2 --- The following options are available: build title subtitle type filename revision","title":"Local Options"},{"location":"options.html#build","text":"Allows you to specify whether to generate a PDF file for a Markdown file. Value is true or false . Note The function of the build option is different from that of the enabled_if_env . The build option disables PDF generation for a single Markdown file while enabled_if_env disables PDF generation for the entire project. default : true","title":"build"},{"location":"options.html#title","text":"Set the title text in cover page.","title":"title"},{"location":"options.html#subtitle","text":"Set the subtitle text in cover page.","title":"subtitle"},{"location":"options.html#type","text":"Set the document type. NB: We use the value for this option in selecting the document's cover image from the cover_images option.","title":"type"},{"location":"options.html#filename","text":"Set the filename to use for a specific page when downloading the PDF document. Note Filename precedence: filename (local pdf metadata) - formatted such that all are valid characters title (local pdf metadata) - formatted such that all are valid characters H1 - formatted such that all are valid characters","title":"filename"},{"location":"options.html#revision","text":"Set the revision text in cover page.","title":"revision"},{"location":"customise/customisation.html","text":"Customisation Custom cover page You can create a custom cover page using a jinja2 or html file. Note You should store the custom cover template file in the directory used for the custom_template_path . The plugin provides the following variables which you can use in your custom Jinja template: cover_title cover_subtitle cover_image author author_logo copyright disclaimer site_url revision custom variables from the extra: setting in your mkdocs.yml and all the options you provide under local pdf metadata of a Markdown file. Using jinja2 syntax, you can access all the data above. E.g. use {{ author }} to get the value for the author option: plugins : - pdf-generate : author : Duodu Randy Using custom cover template You can specify the cover page to use for your PDF by following these steps: Step 1 Set the custom_template_path option for the plugin to the directory you want to store the cover template file. plugins : - pdf-generate : custom_template_path : TEMPLATES PATH Step 2 In the directory you set as custom_template_path , create a template file which the name cover . E.g. cover.html or cover.html.j2 . In the cover template file, write your preferred template syntax into it. Example of a cover template file using Jinja2 syntax: < article id = \"doc-cover\" > {% if cover_image is defined %} < div class = \"wrapper upper\" > < div class = \"logo\" style = \"background-image: url('{{ cover_image | to_url }}');\" ></ div > </ div > {% else %} < div class = \"wrapper\" ></ div > {% endif %} < div class = \"wrapper\" > < h1 > {{ cover_title | e }} </ h1 > < h2 > {{ cover_subtitle | e }} </ h2 > {% if revision %} < h3 > Revision {{ revision | e }} </ h3 > {% endif %} </ div > < div class = \"properties\" > < address > {% if author %} < p id = \"author\" > {{ author | e }} </ p > {% endif %} < a href = \"https://resources.breadboardmates.com\" id = \"project_logo\" title = \"Resource Centre\" > < img src = \"{{ author_logo }}\" alt = \"Company Logo\" style = \"width:80px;height:30px\" /> </ a > </ address > </ div > < div class = \"reserved_rights\" > < address > {% if copyright %} < p id = \"copyright\" > {{ copyright | e }} </ p > {% endif %} {% if disclaimer %} < p id = \"disclaimer\" > {{ disclaimer | e }} </ p > {% endif %} </ address > </ div > </ article > Step 3 Save the file changes and rebuild your MkDocs project. Step 4 (optional) You can style the cover page using CSS. The CSS rules can be written in a custom CSS file which you can add using the extra_css setting in the mkdocs.yml file. extra_css : - css/custom.css Since your stylesheet is appended to the default ones, you can override a rule from using the !important CSS rule.","title":"Customizations"},{"location":"customise/customisation.html#customisation","text":"","title":"Customisation"},{"location":"customise/customisation.html#custom-cover-page","text":"You can create a custom cover page using a jinja2 or html file. Note You should store the custom cover template file in the directory used for the custom_template_path . The plugin provides the following variables which you can use in your custom Jinja template: cover_title cover_subtitle cover_image author author_logo copyright disclaimer site_url revision custom variables from the extra: setting in your mkdocs.yml and all the options you provide under local pdf metadata of a Markdown file. Using jinja2 syntax, you can access all the data above. E.g. use {{ author }} to get the value for the author option: plugins : - pdf-generate : author : Duodu Randy","title":"Custom cover page"},{"location":"customise/customisation.html#using-custom-cover-template","text":"You can specify the cover page to use for your PDF by following these steps: Step 1 Set the custom_template_path option for the plugin to the directory you want to store the cover template file. plugins : - pdf-generate : custom_template_path : TEMPLATES PATH Step 2 In the directory you set as custom_template_path , create a template file which the name cover . E.g. cover.html or cover.html.j2 . In the cover template file, write your preferred template syntax into it. Example of a cover template file using Jinja2 syntax: < article id = \"doc-cover\" > {% if cover_image is defined %} < div class = \"wrapper upper\" > < div class = \"logo\" style = \"background-image: url('{{ cover_image | to_url }}');\" ></ div > </ div > {% else %} < div class = \"wrapper\" ></ div > {% endif %} < div class = \"wrapper\" > < h1 > {{ cover_title | e }} </ h1 > < h2 > {{ cover_subtitle | e }} </ h2 > {% if revision %} < h3 > Revision {{ revision | e }} </ h3 > {% endif %} </ div > < div class = \"properties\" > < address > {% if author %} < p id = \"author\" > {{ author | e }} </ p > {% endif %} < a href = \"https://resources.breadboardmates.com\" id = \"project_logo\" title = \"Resource Centre\" > < img src = \"{{ author_logo }}\" alt = \"Company Logo\" style = \"width:80px;height:30px\" /> </ a > </ address > </ div > < div class = \"reserved_rights\" > < address > {% if copyright %} < p id = \"copyright\" > {{ copyright | e }} </ p > {% endif %} {% if disclaimer %} < p id = \"disclaimer\" > {{ disclaimer | e }} </ p > {% endif %} </ address > </ div > </ article > Step 3 Save the file changes and rebuild your MkDocs project. Step 4 (optional) You can style the cover page using CSS. The CSS rules can be written in a custom CSS file which you can add using the extra_css setting in the mkdocs.yml file. extra_css : - css/custom.css Since your stylesheet is appended to the default ones, you can override a rule from using the !important CSS rule.","title":"Using custom cover template"}]}