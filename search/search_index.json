{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"MkDocs PDF Generate Plugin The pdf-generate plugin will generate separate PDF files for each markdown page in your MkDocs repository using WeasyPrint . The exported documents support many advanced features such as table of contents, customisable cover page, support for CSS paged media module CSS paged media module , and using MkDocs page metadata to generate cover page. Requirements MkDocs version 1.3.0 or higher Python 3.8 or higher WeasyPrint Installation Install the package with pip: pip install mkdocs-pdf-generate-plugin Note: Package is not published to PyPI yet, so we recommend installing from source Install from source repository: cd [ YOUR_PROJECT_DIRECTORY ] git clone https://github.com/iSOLveIT/mkdocs-pdf-generate-plugin cd mkdocs-pdf-generate-plugin pip install -e . Enable the plugin in your mkdocs.yml : plugins : - search - pdf-generate Note: If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set, but now you have to enable it explicitly. More information about plugins in the MkDocs documentation . Contributing From reporting a bug to submitting a pull request: every contribution is appreciated and welcome. Report bugs, ask questions and request features using Github issues . If you want to contribute to the code of this project, please read the Contribution Guidelines . Special thanks Terry Zhao the author of the MkDocs PDF Export Plugin the source of our inspiration. We've used some of his code in this project.","title":"Intro"},{"location":"index.html#mkdocs-pdf-generate-plugin","text":"The pdf-generate plugin will generate separate PDF files for each markdown page in your MkDocs repository using WeasyPrint . The exported documents support many advanced features such as table of contents, customisable cover page, support for CSS paged media module CSS paged media module , and using MkDocs page metadata to generate cover page.","title":"MkDocs PDF Generate Plugin"},{"location":"index.html#requirements","text":"MkDocs version 1.3.0 or higher Python 3.8 or higher WeasyPrint","title":"Requirements"},{"location":"index.html#installation","text":"Install the package with pip: pip install mkdocs-pdf-generate-plugin Note: Package is not published to PyPI yet, so we recommend installing from source Install from source repository: cd [ YOUR_PROJECT_DIRECTORY ] git clone https://github.com/iSOLveIT/mkdocs-pdf-generate-plugin cd mkdocs-pdf-generate-plugin pip install -e . Enable the plugin in your mkdocs.yml : plugins : - search - pdf-generate Note: If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set, but now you have to enable it explicitly. More information about plugins in the MkDocs documentation .","title":"Installation"},{"location":"index.html#contributing","text":"From reporting a bug to submitting a pull request: every contribution is appreciated and welcome. Report bugs, ask questions and request features using Github issues . If you want to contribute to the code of this project, please read the Contribution Guidelines .","title":"Contributing"},{"location":"index.html#special-thanks","text":"Terry Zhao the author of the MkDocs PDF Export Plugin the source of our inspiration. We've used some of his code in this project.","title":"Special thanks"},{"location":"options.html","text":"Options The plugin allows users to pass in both global and local options. Note Local options has a higher precedence than global options. Global Options Some of these global options are used as default options when local options are not set. The global options are passed to the plugin through mkdocs.yml : plugins : - pdf-export : #author: \"Randy Duodu\" #copyright: \"Copyright \u00a9 2022 - Ghana\" #disclaimer: \"Disclaimer: Content can change at anytime and best to refer to website for latest information.\" #toc_level: 3 #cover: true #cover_title: TITLE TEXT #cover_subtitle: SUBTITLE TEXT #custom_template_path: TEMPLATES PATH #toc_title: TOC TITLE TEXT #cover_logo: LINK TO COVER LOGO IMAGE #document_cover: #document_type: \"Link to image file to use as cover logo for a specific type of documents\" #manual: \"https://resources.breadboardmates.com/img/manuals-banner.svg\" #verbose: true #media_type: print #enabled_if_env: ENABLE_PDF_EXPORT for Cover cover Set the value to false if you don't need a cover page. default : true cover_title Set the title text in cover page. NB: We use the value for the title option in your markdown page's metadata if set. default : use site_name in your project mkdocs.yml cover_subtitle Set the subtitle text in cover page. default : use the value for the top-level section ( h1 ) on the page cover_logo Set the logo image in cover page. This value is URL or simply specify the relative path to the documentation directory. NB: If a user sets the document_cover , we use the link value as the cover page. default : None author Set the author text. default : use site_author in your project mkdocs.yml copyright Set the copyright text. default : use copyright in your project mkdocs.yml disclaimer Set the disclaimer text. default : use disclaimer in your project mkdocs.yml copyright Set the author text. default : use copyright in your project mkdocs.yml document_cover Set the cover_logo for specific document types. The option takes a key-value pair where the key must be the same value as the value set for type in the local options. The value must be the path to the image. default : None for Heading and TOC toc_title Set the title text of Table of Content . default : Table of Content toc_level Set the level of Table of Content . This value is enabled in the range of from 1 to 3 . default : 3 ... and more custom_template_path The path where your custom cover.html and/or custom.css are located. default : templates enabled_if_env Setting this option will enable the build only if there is an environment variable set to 1. This is useful to disable building the PDF files during development, since it can take a long time to export all files. default : None PDF generation can take significantly longer than HTML generation which can slow down MkDocs built-in dev-server. Adding enabled_if_env: ENABLE_PDF_EXPORT disables PDF generation during development. Run the dev-server normally: $ mkdocs serve INFO - Building documentation... INFO - PDF export is disabled ( set environment variable ENABLE_PDF_EXPORT to 1 to enable ) INFO - Cleaning site directory INFO - Documentation built in 0 .54 seconds INFO - [ 08 :51:24 ] Watching paths for changes: 'docs' , 'mkdocs.yml' INFO - [ 08 :51:24 ] Serving on http://127.0.0.1:8000/ and to build PDF files, set the ENABLE_PDF_EXPORT=1 environment variable at the command line: $ ENABLE_PDF_EXPORT = 1 mkdocs build ... INFO - Converting 2 files to PDF took 1 .82s INFO - Documentation built in 2 .29 seconds verbose Setting this to true will show all WeasyPrint debug messages during the build. default : false media_type Allows you to use a different CSS media type (or a custom one like pdf-generate ) for the PDF export. default : print theme_handler_path Allows you to specify a custom theme handler module. This path must be relative to your project root (See example below). default : Not Set mkdocs.yml : plugins : - pdf-export : theme_handler_path : theme-handler.py project-root \u251c\u2500\u2500 theme-handler.py \u251c\u2500\u2500 docs \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 site . . Local Options The plugin allows you to set document specific options using the Markdown page metadata. If a page metadata is specified, it has higher precedence than the global options . The local options are specified in the specific Markdown document: --- pdf: - filename: Plugin Options - title: Options for MkDocs PDF Generate Plugin - type: Manual - revision: 0.1 --- The following options are available: title type filename revision title Set the title text in cover page. NB: We use the value for the cover_title global option if you don't set this option. type Set the document type. NB: We use the value for this option in selecting the document's cover logo from the document_cover_logo option. filename Set the filename to use for a specific page when downloading the PDF document. revision Set the revision text in cover page. Custom cover page You can create a custom cover page using a jinja2 or html file. Note The custom cover page (e.g. cover.html or cover.j2) file must be stored in the same directory as custom_template_path . Using jinja2 syntax, you can access all data from your mkdocs.yml . To make template creation easier, you can use plugin_some_plugin to access variables from plugins. E.g. use {{ author }} to get the author from your mkdocs.yml that looks like: plugins : - pdf-generate : author : WHO You can use custom variables extra: in your mkdocs.yml And, you can check it in the log if run with verbose options. Custom stylesheet You can create a custom stylesheet file called custom.css . This file can contain any user specified styles. Since your stylesheet is appended to the default ones, you can override every setting from them. Note The custom stylesheet file must be stored in the same directory as custom_template_path .","title":"Options"},{"location":"options.html#options","text":"The plugin allows users to pass in both global and local options. Note Local options has a higher precedence than global options.","title":"Options"},{"location":"options.html#global-options","text":"Some of these global options are used as default options when local options are not set. The global options are passed to the plugin through mkdocs.yml : plugins : - pdf-export : #author: \"Randy Duodu\" #copyright: \"Copyright \u00a9 2022 - Ghana\" #disclaimer: \"Disclaimer: Content can change at anytime and best to refer to website for latest information.\" #toc_level: 3 #cover: true #cover_title: TITLE TEXT #cover_subtitle: SUBTITLE TEXT #custom_template_path: TEMPLATES PATH #toc_title: TOC TITLE TEXT #cover_logo: LINK TO COVER LOGO IMAGE #document_cover: #document_type: \"Link to image file to use as cover logo for a specific type of documents\" #manual: \"https://resources.breadboardmates.com/img/manuals-banner.svg\" #verbose: true #media_type: print #enabled_if_env: ENABLE_PDF_EXPORT","title":"Global Options"},{"location":"options.html#for-cover","text":"","title":"for Cover"},{"location":"options.html#cover","text":"Set the value to false if you don't need a cover page. default : true","title":"cover"},{"location":"options.html#cover_title","text":"Set the title text in cover page. NB: We use the value for the title option in your markdown page's metadata if set. default : use site_name in your project mkdocs.yml","title":"cover_title"},{"location":"options.html#cover_subtitle","text":"Set the subtitle text in cover page. default : use the value for the top-level section ( h1 ) on the page","title":"cover_subtitle"},{"location":"options.html#cover_logo","text":"Set the logo image in cover page. This value is URL or simply specify the relative path to the documentation directory. NB: If a user sets the document_cover , we use the link value as the cover page. default : None","title":"cover_logo"},{"location":"options.html#author","text":"Set the author text. default : use site_author in your project mkdocs.yml","title":"author"},{"location":"options.html#copyright","text":"Set the copyright text. default : use copyright in your project mkdocs.yml","title":"copyright"},{"location":"options.html#disclaimer","text":"Set the disclaimer text. default : use disclaimer in your project mkdocs.yml","title":"disclaimer"},{"location":"options.html#copyright_1","text":"Set the author text. default : use copyright in your project mkdocs.yml","title":"copyright"},{"location":"options.html#document_cover","text":"Set the cover_logo for specific document types. The option takes a key-value pair where the key must be the same value as the value set for type in the local options. The value must be the path to the image. default : None","title":"document_cover"},{"location":"options.html#for-heading-and-toc","text":"","title":"for Heading and TOC"},{"location":"options.html#toc_title","text":"Set the title text of Table of Content . default : Table of Content","title":"toc_title"},{"location":"options.html#toc_level","text":"Set the level of Table of Content . This value is enabled in the range of from 1 to 3 . default : 3","title":"toc_level"},{"location":"options.html#and-more","text":"","title":"... and more"},{"location":"options.html#custom_template_path","text":"The path where your custom cover.html and/or custom.css are located. default : templates","title":"custom_template_path"},{"location":"options.html#enabled_if_env","text":"Setting this option will enable the build only if there is an environment variable set to 1. This is useful to disable building the PDF files during development, since it can take a long time to export all files. default : None PDF generation can take significantly longer than HTML generation which can slow down MkDocs built-in dev-server. Adding enabled_if_env: ENABLE_PDF_EXPORT disables PDF generation during development. Run the dev-server normally: $ mkdocs serve INFO - Building documentation... INFO - PDF export is disabled ( set environment variable ENABLE_PDF_EXPORT to 1 to enable ) INFO - Cleaning site directory INFO - Documentation built in 0 .54 seconds INFO - [ 08 :51:24 ] Watching paths for changes: 'docs' , 'mkdocs.yml' INFO - [ 08 :51:24 ] Serving on http://127.0.0.1:8000/ and to build PDF files, set the ENABLE_PDF_EXPORT=1 environment variable at the command line: $ ENABLE_PDF_EXPORT = 1 mkdocs build ... INFO - Converting 2 files to PDF took 1 .82s INFO - Documentation built in 2 .29 seconds","title":"enabled_if_env"},{"location":"options.html#verbose","text":"Setting this to true will show all WeasyPrint debug messages during the build. default : false","title":"verbose"},{"location":"options.html#media_type","text":"Allows you to use a different CSS media type (or a custom one like pdf-generate ) for the PDF export. default : print","title":"media_type"},{"location":"options.html#theme_handler_path","text":"Allows you to specify a custom theme handler module. This path must be relative to your project root (See example below). default : Not Set mkdocs.yml : plugins : - pdf-export : theme_handler_path : theme-handler.py project-root \u251c\u2500\u2500 theme-handler.py \u251c\u2500\u2500 docs \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 site . .","title":"theme_handler_path"},{"location":"options.html#local-options","text":"The plugin allows you to set document specific options using the Markdown page metadata. If a page metadata is specified, it has higher precedence than the global options . The local options are specified in the specific Markdown document: --- pdf: - filename: Plugin Options - title: Options for MkDocs PDF Generate Plugin - type: Manual - revision: 0.1 --- The following options are available: title type filename revision","title":"Local Options"},{"location":"options.html#title","text":"Set the title text in cover page. NB: We use the value for the cover_title global option if you don't set this option.","title":"title"},{"location":"options.html#type","text":"Set the document type. NB: We use the value for this option in selecting the document's cover logo from the document_cover_logo option.","title":"type"},{"location":"options.html#filename","text":"Set the filename to use for a specific page when downloading the PDF document.","title":"filename"},{"location":"options.html#revision","text":"Set the revision text in cover page.","title":"revision"},{"location":"options.html#custom-cover-page","text":"You can create a custom cover page using a jinja2 or html file. Note The custom cover page (e.g. cover.html or cover.j2) file must be stored in the same directory as custom_template_path . Using jinja2 syntax, you can access all data from your mkdocs.yml . To make template creation easier, you can use plugin_some_plugin to access variables from plugins. E.g. use {{ author }} to get the author from your mkdocs.yml that looks like: plugins : - pdf-generate : author : WHO You can use custom variables extra: in your mkdocs.yml And, you can check it in the log if run with verbose options.","title":"Custom cover page"},{"location":"options.html#custom-stylesheet","text":"You can create a custom stylesheet file called custom.css . This file can contain any user specified styles. Since your stylesheet is appended to the default ones, you can override every setting from them. Note The custom stylesheet file must be stored in the same directory as custom_template_path .","title":"Custom stylesheet"}]}